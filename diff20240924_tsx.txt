diff --git a/reading_fe_app/src/hooks.ts b/reading_fe_app/src/hooks.ts
index 78dc9c1..177c7a6 100644
--- a/reading_fe_app/src/hooks.ts
+++ b/reading_fe_app/src/hooks.ts
@@ -2,6 +2,7 @@ import { TypedUseSelectorHook } from "react-redux";
 import { useDispatch, useSelector } from "react-redux";
 import { useState, useRef } from "react";
 import { RootState, AppDispatch } from "./store";
+import { CPageLists, PageContext } from "./pageContext";
 
 // Use throughout your app instead of plain `useDispatch` and `useSelector`
 export const useAppDispatch = () => useDispatch<AppDispatch>();
@@ -17,3 +18,36 @@ export const useDialog = () => {
   }
   return { isActive, toggleDialog };
 };
+export const useWordsToBeRecited = (
+  termIdx: number,
+  span: number = 0
+): string[] => {
+  let words: string = "";
+  let strQ: string[] = [];
+  const pageContext: CPageLists = useAppSelector(store => store.pageContext);
+  // words from termIdx to termIdx + span (or end of sentence, whichever)
+  // comes first
+  let minLastIdx: number = Math.min(
+    span + termIdx,
+    pageContext.sentenceList[pageContext.terminalList[termIdx].sentenceIdx]
+      .lastTermIdx
+  );
+  for (let idx = termIdx; idx <= minLastIdx; idx++) {
+    words += ` ${
+      pageContext.terminalList[idx].altpronunciation !== ""
+        ? pageContext.terminalList[idx].altpronunciation
+        : pageContext.terminalList[idx].content
+    }`;
+  }
+  // add punctuation iff idx === lastTermIdx
+  if (
+    minLastIdx ===
+    pageContext.sentenceList[pageContext.terminalList[termIdx].sentenceIdx]
+      .lastTermIdx
+  )
+    words +=
+      pageContext.sentenceList[pageContext.terminalList[termIdx].sentenceIdx]
+        .lastPunctuation;
+  strQ.push(words);
+  return strQ;
+};
diff --git a/reading_fe_app/src/pageContentType.ts b/reading_fe_app/src/pageContentType.ts
index 86d79f4..07005d5 100644
--- a/reading_fe_app/src/pageContentType.ts
+++ b/reading_fe_app/src/pageContentType.ts
@@ -8,7 +8,17 @@
  *
  **/
 export const IDX_INITIALIZER = -9999;
-export const PageContentVersion = "20240611.1";
+export const PageContentVersion = "20240916.1";
+// 20230916 - Modified inlineButtonItem.sectionIdx
+// 20240821 - Added inlineButtonItem.nextTermIdx
+// 20240817 - Added inlineButtonItem.endListIdx
+// 20240807 - Added support for inlineButton and buttongrid
+// 20240713 - Move and renamed enum const InlineButton* to
+// 20240719 - Added position to IInlineButtonItem
+//            Renamed RecitationPosition to RecitationPlacement and retasked
+//            (cursor) position enum for relative position of prose to be
+//            recited for inline button.
+// 20240724 - Added InlineButtonActionEnumType in IInlineButtonItem
 export enum PageFormatEnumType {
   default = 0
 }
@@ -37,6 +47,7 @@ export interface IPageContent {
   sentenceList: ISentenceListItem[];
   linkList: ILinkListItem[];
   fillinList: ISectionFillinItem[];
+  inlineButtonList: IInlineButtonItem[];
 }
 export function PageContentInitializer(): IPageContent {
   return {
@@ -63,7 +74,8 @@ export function PageContentInitializer(): IPageContent {
     sectionList: [],
     sentenceList: [],
     linkList: [],
-    fillinList: []
+    fillinList: [],
+    inlineButtonList: []
   };
 }
 export interface ISectionContent {
@@ -177,7 +189,10 @@ export interface ISectionButtonGridVariant {
   description: string;
   columnCount: number;
   minColumnWidth: number;
-  buttonText: string[];
+  sorted: boolean;
+  groupedBy: boolean;
+  rate: number;
+  buttons: ITerminalContent[];
 }
 export function ISectionButtonGridVariantInitializer(): ISectionButtonGridVariant {
   return {
@@ -185,8 +200,11 @@ export function ISectionButtonGridVariantInitializer(): ISectionButtonGridVarian
     buttonWidth: 0,
     description: "",
     columnCount: 0,
-    minColumnWidth: 50,
-    buttonText: []
+    minColumnWidth: 11, // %vw
+    sorted: false,
+    groupedBy: false,
+    rate: 1,
+    buttons: []
   };
 }
 export interface ISectionBlockquoteVariant {
@@ -248,12 +266,14 @@ export function ISectionOrderedListVariantInitializer(): ISectionOrderedListVari
 export interface ISectionParagraphVariant {
   sentences: ISentenceContent[];
   //sentences: ISentenceNode[];
+  listItem: boolean;
   style: string; // overrides css but not user profile
   class: string;
 }
 export function ISectionParagraphVariantInitializer(): ISectionParagraphVariant {
   return {
     sentences: [],
+    listItem: false,
     style: "", // overrides css but not user profile
     class: "p"
   };
@@ -681,7 +701,7 @@ export function ISentenceContentInitializer(): ISentenceContent {
 }
 export enum TerminalMetaEnumType {
   acronym,
-  recitebutton,
+  inlinebutton,
   currency,
   date,
   emailaddress,
@@ -869,7 +889,7 @@ export interface ITerminalContent {
 }
 export type TerminalMetaType =
   | IAcronymTerminalMeta
-  | IReciteButtonTerminalMeta
+  | IInlineButtonTerminalMeta
   | ICurrencyTerminalMeta
   | IDateTerminalMeta
   | IEmailAddressTerminalMeta
@@ -976,17 +996,17 @@ export function IAcronymTerminalMetaInitializer(): IAcronymTerminalMeta {
     letters: []
   };
 }
-export interface IReciteButtonTerminalMeta {
+export interface IInlineButtonTerminalMeta {
   buttonIdx: number;
   label: string;
-  image: string;
+  // image: string;
   attributes: string;
 }
-export function IReciteButtonTerminalMetaInitializer(): IReciteButtonTerminalMeta {
+export function IInlineButtonTerminalMetaInitializer(): IInlineButtonTerminalMeta {
   return {
     buttonIdx: IDX_INITIALIZER,
     label: "Recite",
-    image: "button_speak.png",
+    // image: "button_speak.png",
     attributes: ""
   };
 }
@@ -1417,51 +1437,92 @@ export function ILinkListItemInitializer(
 ): ILinkListItem {
   return { label, destination, valid };
 }
-export enum ReciteScopeEnumType {
-  label = "label", // label provided
-  word = "word", // next words up to count
-  sentence = "sentence" // next sentence
+export enum InlineButtonActionEnumType {
+  choice = "choice", // recites correct/incorrect
+  completion = "completion", //recite up to then listen
+  converse = "converse", // diaglog of sentence pairs
+  cues = "cues", // embedded text
+  label = "label", // label with icon
+  model = "model", // recite then listen for the same words/sentence
+  none = "none", // do nothing
+  term = "term" // label with no icon
+}
+export enum RecitationScopeEnumType {
+  words = "words",
+  sentence = "sentence",
+  section = "section",
+  passThru = "passThru"
+}
+// strictly for inlineButton words, sentence, section only based on currentTerm
+export enum RecitationReferenceEnumType {
+  preceding = "preceding",
+  following = "following"
 }
-export enum ReciteCursorActionEnumType {
-  cursorUnchanged = "cursorUnchanged", // (default) cursor unchanged
-  cursorAtEnd = "cursorAtEnd", // after prose in scope
-  cursorAtBeginning = "cursorAtBeginning" // before prose in scope
+export enum RecitationPlacementEnumType {
+  unchanged = "cursorUnchanged", // (default) cursor unchanged
+  end = "cursorAtEnd", // after prose in scope
+  beginning = "cursorAtBeginning" // before prose in scope
 }
-export enum ReciteListeningActionEnumType {
+export enum RecitationListeningEnumType {
   startListening = "startListening",
+  startEndListening = "start then end listening",
   notListening = "notListening"
 }
-export interface IReciteButtonItem {
+// export enum InlineButtonScopeEnumType {
+//   label = "label", // label provided
+//   word = "word", // next words up to count
+//   hint = "hint", // hint in parameter list
+//   sentence = "sentence" // next sentence
+// }
+// export enum InlineButtonCursorActionEnumType {
+//   cursorUnchanged = "cursorUnchanged", // (default) cursor unchanged
+//   cursorAtEnd = "cursorAtEnd", // after prose in scope
+//   cursorAtBeginning = "cursorAtBeginning" // before prose in scope
+// }
+// export enum InlineButtonListeningActionEnumType {
+//   startListening = "startListening",
+//   notListening = "notListening"
+// }
+export interface IInlineButtonItem {
+  buttonIdx: number;
   termIdx: number;
-  scope: ReciteScopeEnumType;
-  cursorAction: ReciteCursorActionEnumType;
-  listeningAction: ReciteListeningActionEnumType;
+  sectionIdx: number;
+  lastTermIdx: number;
+  action: InlineButtonActionEnumType;
   span: number;
   label: string;
-  hint: string;
+  cues: string; // should be string[]
   rate: number; // otherwise default to page, app settings
+  voiceIndex: number;
+  nextTermIdx: number;
   toBeRecited: string;
 }
-export function IReciteButtonItemInitializer(
+export function IInlineButtonItemInitializer(
+  buttonIdx = IDX_INITIALIZER,
   termIdx = IDX_INITIALIZER,
-  scope = ReciteScopeEnumType.label,
-  cursorAction = ReciteCursorActionEnumType.cursorUnchanged,
-  listeningAction: ReciteListeningActionEnumType = ReciteListeningActionEnumType.notListening,
-  span: number = IDX_INITIALIZER,
-  label: string = "",
-  hint: string = "",
-  rate: number = 1,
+  sectionIdx = IDX_INITIALIZER,
+  lastTermIdx = IDX_INITIALIZER,
+  action = InlineButtonActionEnumType.label,
+  span = 0,
+  label = "",
+  cues = "",
+  rate = 1,
+  voiceIndex = 0,
+  nextTermIdx = IDX_INITIALIZER,
   toBeRecited = ""
-): IReciteButtonItem {
+): IInlineButtonItem {
   return {
+    buttonIdx,
     termIdx,
-    scope,
-    cursorAction,
-    listeningAction,
+    sectionIdx,
+    lastTermIdx,
+    action,
     span,
     label,
-    hint,
+    cues,
     rate,
+    voiceIndex,
+    nextTermIdx,
     toBeRecited
   };
 }
diff --git a/reading_fe_app/src/pageContext.ts b/reading_fe_app/src/pageContext.ts
index de81ed1..a577282 100644
--- a/reading_fe_app/src/pageContext.ts
+++ b/reading_fe_app/src/pageContext.ts
@@ -18,7 +18,8 @@ import {
   ISentenceListItem,
   ISectionListItem,
   ITerminalListItem,
-  ISectionFillinItem
+  ISectionFillinItem,
+  IInlineButtonItem
 } from "./pageContentType";
 
 // export interface IPageContext1 {
@@ -38,6 +39,7 @@ export interface IPageLists {
   sentenceList: ISentenceListItem[];
   linkList: ILinkListItem[];
   fillinList: ISectionFillinItem[];
+  inlineButtonList: IInlineButtonItem[];
 }
 export function PageListsInitializer(
   terminalList: ITerminalListItem[] = [],
@@ -45,7 +47,8 @@ export function PageListsInitializer(
   sectionList: ISectionListItem[] = [],
   sentenceList: ISentenceListItem[] = [],
   linkList: ILinkListItem[] = [],
-  fillinList: ISectionFillinItem[] = []
+  fillinList: ISectionFillinItem[] = [],
+  inlineButtonList: IInlineButtonItem[] = []
 ): IPageLists {
   return {
     terminalList: terminalList,
@@ -53,7 +56,8 @@ export function PageListsInitializer(
     sectionList: sectionList,
     sentenceList: sentenceList,
     linkList: linkList,
-    fillinList: fillinList
+    fillinList: fillinList,
+    inlineButtonList: inlineButtonList
   };
 }
 // export const PageContext = React.createContext(null as IPageContext | null);
@@ -81,7 +85,8 @@ export class CPageLists {
     sectionList: ISectionListItem[] = [],
     sentenceList: ISentenceListItem[] = [],
     linkList: ILinkListItem[] = [],
-    fillinList: ISectionFillinItem[] = []
+    fillinList: ISectionFillinItem[] = [],
+    inlineButtonList: IInlineButtonItem[] = []
   ) {
     this.showTags = showTags;
     this.terminalList = terminalList;
@@ -90,6 +95,7 @@ export class CPageLists {
     this.sentenceList = sentenceList;
     this.linkList = linkList;
     this.fillinList = fillinList;
+    this.inlineButtonList = inlineButtonList;
   }
   showTags: boolean;
   terminalList: ITerminalListItem[];
@@ -98,6 +104,7 @@ export class CPageLists {
   sentenceList: ISentenceListItem[];
   linkList: ILinkListItem[];
   fillinList: ISectionFillinItem[];
+  inlineButtonList: IInlineButtonItem[];
 
   get firstTerminalIdx(): number {
     return 0;
diff --git a/reading_fe_app/src/react-app-env.d.ts b/reading_fe_app/src/react-app-env.d.ts
index 6431bc5..fc3f411 100644
--- a/reading_fe_app/src/react-app-env.d.ts
+++ b/reading_fe_app/src/react-app-env.d.ts
@@ -1 +1,2 @@
 /// <reference types="react-scripts" />
+declare module "*.mp3";
diff --git a/reading_fe_app/src/reducers.ts b/reading_fe_app/src/reducers.ts
index 749b8e8..14f3abe 100644
--- a/reading_fe_app/src/reducers.ts
+++ b/reading_fe_app/src/reducers.ts
@@ -16,11 +16,17 @@
  **/
 import { CPageLists } from "./pageContext";
 import {
+  // InlineButtonScopeEnumType,
+  // InlineButtonCursorActionEnumType,
+  // InlineButtonListeningActionEnumType,
   IPageRequestItem,
   LinkIdxDestinationType,
   PageRequestItemInitializer
+  // RecitationScopeEnumType,
+  // RecitationPositionEnumType,
+  // RecitationListeningEnumType
 } from "./pageContentType";
-const IDX_INITIALIZER = -9999;
+export const IDX_INITIALIZER = -9999;
 // import {
 //   ISettings,
 //   ISettingsContext,
@@ -111,9 +117,27 @@ const TRANSITION_ACKNOWLEDGE = "transition/acknowledge";
 //const RECITE = "recite";  // requests to start and stop recite
 const RECITE_START = "recite/start";
 const RECITE_STOP = "recite/stop";
-const RECITE_TOGGLE = "recite/toggle"; // request from recite button
+// const RECITE_TOGGLE = "recite/toggle"; // request from recite button
 const RECITE_WORD = "recite/word"; // exclusively for wordNext
 const RECITED_WORD = "recited/word"; // exclusively for wordNext
+// const RECITE_WORKFLOW_START = "recite/workflow start";
+// const RECITE_WORKFLOW_END = "recite/workflow end";
+const RECITEBUTTON_CLICK = "recitebutton/click";
+const RECITEBUTTON_CLICKED = "recitebutton/clicked";
+
+// inline button click/clicked wrap the subsequent subactions below
+const INLINEBUTTON_CLICK = "inlinebutton/click"; // starting
+const INLINEBUTTON_CLICKED = "inlinebutton/clicked"; // ended
+
+// action states within inline button cllick
+const INLINEBUTTON_LISTEN = "inlinebutton/listen";
+const INLINEBUTTON_LISTENED = "inlinebutton/listened";
+const INLINEBUTTON_MOVE = "inlinebutton/move";
+const INLINEBUTTON_MOVED = "inlinebutton/moved";
+const INLINEBUTTON_RECITE = "inlinebutton/recite";
+const INLINEBUTTON_RECITED = "inlinebutton/recited";
+const INLINEBUTTON_SIGNAL = "inlinebutton/signal";
+const INLINEBUTTON_SIGNALED = "inlinebutton/signaled";
 
 const RECITING_STARTED = "reciting/started"; // actual state of reciting
 const RECITING_ENDED = "reciting/ended"; // actual state of reciting
@@ -273,6 +297,76 @@ const Fillin_resetSection = (sectionIdx: number) => {
 //     payload: sectionIdx
 //   };
 // };
+const InlineButton_click = (buttondIdx: number) => {
+  return {
+    type: INLINEBUTTON_CLICK,
+    payload: buttondIdx
+  };
+};
+const InlineButton_clicked = () => {
+  return {
+    type: INLINEBUTTON_CLICKED
+  };
+};
+const InlineButton_listen = () => {
+  return {
+    type: INLINEBUTTON_LISTEN
+  };
+};
+const InlineButton_listened = () => {
+  return {
+    type: INLINEBUTTON_LISTENED
+  };
+};
+const InlineButton_move = () => {
+  return {
+    type: INLINEBUTTON_MOVE
+  };
+};
+const InlineButton_moved = () => {
+  return {
+    type: INLINEBUTTON_MOVED
+  };
+};
+const InlineButton_recite = (toBeRecited: string[]) => {
+  return {
+    type: INLINEBUTTON_RECITE,
+    payload: toBeRecited
+  };
+};
+const InlineButton_recited = () => {
+  return {
+    type: INLINEBUTTON_RECITED
+  };
+};
+const InlineButton_signal = () => {
+  return {
+    type: INLINEBUTTON_SIGNAL
+  };
+};
+const InlineButton_signaled = () => {
+  return {
+    type: INLINEBUTTON_SIGNALED
+  };
+};
+// const ReciteWorkflow_start = (
+//   termIdx: number = IDX_INITIALIZER,
+//   scope: RecitationScopeEnumType = RecitationScopeEnumType.words,
+//   span: number = 0,
+//   position: RecitationPositionEnumType = RecitationPositionEnumType.unchanged,
+//   listening: RecitationListeningEnumType = RecitationListeningEnumType.notListening
+// ) => {
+//   return {
+//     type: RECITE_WORKFLOW_START,
+//     payload: {
+//       termIdx: termIdx,
+//       scope: scope,
+//       span: span,
+//       position: RecitationPositionEnumType,
+//       listening: RecitationListeningEnumType
+//     }
+//   };
+// };
 const Message_set = (
   message: string,
   msgType: StatusBarMessageType = StatusBarMessageType.application
@@ -429,10 +523,10 @@ const Recognition_message = (message: string) => {
 //     payload: message
 //   };
 // };
-const Recognition_start = (maxRetries: number) => {
+const Recognition_start = (stopAtEOS: boolean = false) => {
   return {
     type: LISTENING_START,
-    payload: maxRetries
+    payload: stopAtEOS
   };
 };
 const Recognition_stop = () => {
@@ -478,11 +572,11 @@ const Recite_stop = () => {
     type: RECITE_STOP
   };
 };
-const Recite_toggle = () => {
-  return {
-    type: RECITE_TOGGLE
-  };
-};
+// const Recite_toggle = () => {
+//   return {
+//     type: RECITE_TOGGLE
+//   };
+// };
 const Settings_toggle = () => {
   return {
     type: SETTINGS_TOGGLE
@@ -510,6 +604,17 @@ export const Request = {
   Fillin_resetSection,
   // Fillin_toggleTagsSection,
   // Fillin_selectLayoutSection,
+  InlineButton_click,
+  InlineButton_clicked,
+  // ReciteButton_clicked,
+  InlineButton_listen,
+  InlineButton_listened,
+  InlineButton_move,
+  InlineButton_moved,
+  InlineButton_recite,
+  InlineButton_recited,
+  InlineButton_signal,
+  InlineButton_signaled,
 
   Message_set,
   Message_clear,
@@ -539,7 +644,7 @@ export const Request = {
   Recite_stop,
   Recite_currentWord,
   Recited_currentWord,
-  Recite_toggle, // strictly for button event
+  // Recite_toggle, // strictly for button event
 
   Recognition_toggle,
   Recognition_setAvailability,
@@ -575,6 +680,7 @@ interface IReduxState {
 
   listen_available: boolean;
   listen_active: boolean;
+  listen_stopAtEOS: boolean;
   // listen_flush: boolean;
   listen_silenceStartTime: number;
   // listen_retriesExceeded: boolean;
@@ -626,6 +732,7 @@ interface IReduxState {
 
   navbar_toggle: boolean;
 
+  // recite_toggle: boolean; // on/off
   recite_requested: boolean;
   recite_word_requested: boolean;
   recite_word_completed: boolean;
@@ -639,6 +746,13 @@ interface IReduxState {
   message_application: string;
   message_listening: string;
   message_state: string;
+
+  inlinebutton_idx: number;
+  inlinebutton_listen_requested: boolean;
+  inlinebutton_move_requested: boolean;
+  inlinebutton_recite_requested: boolean;
+  inlinebutton_recite_toBeRecited: string[];
+  inlinebutton_signal_requested: boolean;
 }
 const IReduxStateInitialState: IReduxState = {
   announce_available: false,
@@ -647,8 +761,9 @@ const IReduxStateInitialState: IReduxState = {
 
   listen_available: false,
   listen_active: false,
-  // listen_flush: false,
+  listen_stopAtEOS: false,
   listen_silenceStartTime: 0,
+  // listen_flush: false,
   // listen_retries_max: 0,
   // listen_retries: 0,
   // listen_retriesExceeded: false,
@@ -708,7 +823,13 @@ const IReduxStateInitialState: IReduxState = {
   message_listening: "",
   message_state: "",
   //  pageContext: PageContextInitializer()
-  navbar_toggle: true
+  navbar_toggle: true,
+  inlinebutton_idx: IDX_INITIALIZER,
+  inlinebutton_recite_toBeRecited: [],
+  inlinebutton_listen_requested: false,
+  inlinebutton_move_requested: false,
+  inlinebutton_recite_requested: false,
+  inlinebutton_signal_requested: false
 };
 export const rootReducer = (
   state: IReduxState = IReduxStateInitialState,
@@ -719,7 +840,13 @@ export const rootReducer = (
     currentSentenceIdx: number
   ): [number, boolean] => {
     let sentenceIdx: number = state.pageContext.sentenceIdx(terminalIdx);
-    return [sentenceIdx, sentenceIdx !== currentSentenceIdx];
+    // console.log(
+    //   `@@@@setSentenceState:newsentence=${sentenceIdx !== currentSentenceIdx}`
+    // );
+    return [
+      sentenceIdx,
+      terminalIdx === 0 || sentenceIdx !== currentSentenceIdx
+    ];
   };
   const setSectionState = (
     terminalIdx: number,
@@ -872,7 +999,7 @@ export const rootReducer = (
   //   state.listen_retriesExceeded = false;
   // };
   const setListeningMessage = (message: string): string => {
-    state.message_state = `${action.type}: ${message}`;
+    state.message_state = `${action.type}: ${message}.`;
     console.log(`Listening: ${state.message_state}`);
     return state.message_state;
   };
@@ -1039,17 +1166,27 @@ export const rootReducer = (
     case LISTENING_TOGGLE:
       if (state.listen_available) {
         state.listen_active = !state.listen_active;
+        console.log(`toggle: listen_active=${state.listen_active}`);
         // if (state.listen_active) {
         //   state.listen_retries_max = +action.payload;
         //   resetListeningRetries();
         // }
       }
       return { ...state };
+    case LISTENING_START:
+      if (state.listen_available) {
+        state.listen_stopAtEOS = action.payload;
+        state.listen_active = true;
+        console.log(`start: listen_active=${state.listen_active}`);
+      }
+      return { ...state };
     case LISTENING_STOP:
       state.listen_active = false;
+      state.listen_stopAtEOS = false; // reset
       // state.listen_retries = 0;
       // state.listen_retriesExceeded = false;
       setListeningMessage((!state.listen_active).toString());
+      console.log(`stop: listen_active=${state.listen_active}`);
       return { ...state };
     case LISTENING_AVAILABLE:
       state.listen_available = action.payload;
@@ -1103,9 +1240,10 @@ export const rootReducer = (
       state.reciting = false;
       return { ...state };
 
-    case RECITE_TOGGLE:
-      state.recite_requested = !state.recite_requested;
-      return { ...state };
+    // case RECITE_TOGGLE:
+    //   // either via inline button or recite button
+    //   state.recite_requested = !state.recite_requested;
+    //   return { ...state };
     case RECITE_WORD:
       state.recite_word_requested = true;
       return { ...state };
@@ -1114,7 +1252,12 @@ export const rootReducer = (
       return { ...state };
     case SETTINGS_TOGGLE:
       state.settings_toggle = !state.settings_toggle;
-      if (state.settings_toggle) state.listen_active = false;
+      if (state.settings_toggle) {
+        state.listen_active = false;
+        console.log(`settingtoggle: listen_active=${state.listen_active}`);
+
+        state.listen_stopAtEOS = false; // reset
+      }
       return { ...state };
 
     case STATUSBAR_MESSAGE_SET:
@@ -1176,6 +1319,60 @@ export const rootReducer = (
       state.navbar_toggle = !state.navbar_toggle;
       return { ...state };
     }
+    case INLINEBUTTON_CLICK: {
+      state.inlinebutton_idx = action.payload;
+      state.inlinebutton_listen_requested = false;
+      state.inlinebutton_move_requested = false;
+      state.inlinebutton_recite_requested = false;
+      state.inlinebutton_signal_requested = false;
+      // console.log(`reducer inlinebutton idx=${action.payload}`);
+      return state;
+    }
+    case INLINEBUTTON_CLICKED: {
+      state.inlinebutton_idx = IDX_INITIALIZER;
+      state.inlinebutton_recite_toBeRecited = [];
+      //      state.inlinebutton_listen_requested = false;
+      state.inlinebutton_move_requested = false;
+      state.inlinebutton_recite_requested = false;
+      state.inlinebutton_signal_requested = false;
+      return state;
+    }
+    case INLINEBUTTON_LISTEN: {
+      state.inlinebutton_listen_requested = true;
+      return state;
+    }
+    case INLINEBUTTON_LISTENED: {
+      state.inlinebutton_listen_requested = false;
+      return state;
+    }
+    case INLINEBUTTON_MOVE: {
+      state.inlinebutton_move_requested = true;
+      // assumes inlinebutton_idx is valid
+      return state;
+    }
+    case INLINEBUTTON_MOVED: {
+      state.inlinebutton_move_requested = false;
+      return state;
+    }
+    case INLINEBUTTON_RECITE: {
+      state.inlinebutton_recite_requested = true;
+      state.inlinebutton_recite_toBeRecited = action.payload;
+      // assumes inlinebutton_idx is valid
+      return state;
+    }
+    case INLINEBUTTON_RECITED: {
+      state.inlinebutton_recite_requested = false;
+      return state;
+    }
+    case INLINEBUTTON_SIGNAL: {
+      state.inlinebutton_signal_requested = true;
+      // assumes inlinebutton_idx is valid
+      return state;
+    }
+    case INLINEBUTTON_SIGNALED: {
+      state.inlinebutton_signal_requested = false;
+      return state;
+    }
     default:
       console.log(`looking for undefined: ${action.type}`);
       return { ...state };
diff --git a/reading_fe_app/src/settingsContext.ts b/reading_fe_app/src/settingsContext.ts
index 2a66dc9..19b8de7 100644
--- a/reading_fe_app/src/settingsContext.ts
+++ b/reading_fe_app/src/settingsContext.ts
@@ -24,6 +24,11 @@ import {
   SectionFillinLayoutType,
   SectionFillinSortOrder
 } from "./pageContentType";
+import {
+  RecitationScopeEnumType,
+  RecitationPlacementEnumType,
+  RecitationListeningEnumType
+} from "./pageContentType";
 export enum RecitationMode {
   wordOnly = "word only",
   wordNext = "word (then advance)",
@@ -34,6 +39,28 @@ export enum RecitationMode {
   section = "section, paragraph, etc.",
   sectionNext = "section, paragraph, etc. (then advance)"
 }
+export enum RecitationMode1 {
+  words = "word sequence",
+  sentence = "entire sentence",
+  section = "section, paragraph, etc.",
+  embedded = "embedded label or hint from inline button"
+}
+// export enum RecitationScopeEnumType {
+//   words = "word",
+//   sentence = "sentence",
+//   section = "section",
+//   label = "label",
+//   embedded = "embedded"
+// }
+// export enum RecitationPositionEnumType {
+//   unchanged = "unchanged", // (default) cursor unchanged
+//   end = "atEnd", // after prose in scope
+//   beginning = "atBeginning" // before prose in scope
+// }
+// export enum RecitationListeningEnumType {
+//   startListening = "startListening",
+//   notListening = "notListening"
+// }
 export enum NotificationMode {
   sound = "sound",
   voice = "voice"
@@ -74,7 +101,9 @@ export interface IConfigSettings {
   fillinPresets: ISectionFillinPresets;
 }
 export interface ISpeechSettings {
-  recitationMode: RecitationMode;
+  scope: RecitationScopeEnumType;
+  placement: RecitationPlacementEnumType;
+  listening: RecitationListeningEnumType;
   lang: string;
   locale: string;
   gender: string;
@@ -110,18 +139,22 @@ export function ConfigSettingsInitializer(
   };
 }
 export function SpeechSettingsInitializer(
-  recitationMode: RecitationMode = RecitationMode.wordOnly,
+  scope: RecitationScopeEnumType = RecitationScopeEnumType.sentence,
+  placement: RecitationPlacementEnumType = RecitationPlacementEnumType.unchanged,
+  listening: RecitationListeningEnumType = RecitationListeningEnumType.notListening,
   lang: string = "English",
   locale: string = "en-US",
   gender: string = "female",
   pitch: number = 0,
   rate: number = 1,
   volume: number = 0.5,
-  selectedVoiceIndex: number = Synthesizer.selectedVoiceIndex, // ms female voice
-  os: string = "windows"
+  selectedVoiceIndex: number = Synthesizer.selectedVoiceIndex // ms female voice
+  // os: string = "windows"
 ): ISpeechSettings {
   return {
-    recitationMode,
+    scope,
+    placement,
+    listening,
     lang,
     locale,
     gender,
